MOD = 1000000007
N = 1

class ModInt:
    def __init__(self, value):
        self.value = value % MOD

    def __add__(self, other):
        return ModInt(self.value + other.value)

    def __sub__(self, other):
        return ModInt(self.value - other.value)

    def __mul__(self, other):
        return ModInt(self.value * other.value)

    def __pow__(self, k):
        x = self
        y = ModInt(1)
        while k > 0:
            if k & 1:
                y *= x
            x *= x
            k >>= 1
        return y

    def inv(self):
        return self ** (MOD - 2)

    def __truediv__(self, other):
        return self * other.inv()

    def __str__(self):
        return str(self.value)
    

comb = [[ModInt(0) for _ in range(N)] for _ in range(N)]

C = [ModInt(0) for _ in range(N)]

G = [ModInt(0) for _ in range(N)]

dp = [[ModInt(0) for _ in range(N)] for _ in range(N)]

vis = [[False for _ in range(N)] for _ in range(N)]



def pre():
    for i in range(N):
        comb[i][0] = ModInt(1)
    for i in range(1, N):
        for j in range(1, N):
            comb[i][j] = comb[i - 1][j - 1] + comb[i - 1][j]

def yo(n, k):
    if k > n:
        return ModInt(0)
    
    if k == n:
        return ModInt(1)
    

    if k == 0:
        return ModInt(0)
    
    if vis[n][k]:
        return dp[n][k]
    vis[n][k] = True
    ans = ModInt(0)
    
    for s in range(1, n + 1):
        ans += (comb[n - 1][s - 1] * C[s]) * yo(n - s, k - 1)
    dp[n][k] = ans
    return ans

def main():
    pre()
    for i in range(1, N):
        G[i] = ModInt(2) ** (i * (i - 1) // 2)
    for n in range(1, N):
        ans = ModInt(0)
        for k in range(1, n):
            ans += (ModInt(k) * comb[n][k]) * (C[k] * G[n - k])
        ans /= ModInt(n)
        C[n] = G[n] - ans

    t = int(input())
    for _ in range(t):
        n, k = map(int, input().split())
        print(yo(n, k))

if __name__ == "__main__":
    main()
